-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß BMX ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ BodyVelocity ‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (loop) + ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö AutoFarmATM + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏≥‡∏ó‡∏≤‡∏á ATM

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
if not humanoid then
    warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Humanoid ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")
    return
end

local ATMFolder = Workspace:WaitForChild("Map"):WaitForChild("Props"):WaitForChild("ATMs")
local currentATM = nil
local moving = false

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡∏ó‡∏≤‡∏á ATM
local function DismountIfSeated()
    if humanoid.SeatPart then
        print("[üö≤] ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞ ‚Üí ‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤ ATM")
        humanoid.Sit = false
        task.wait(0.3)
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô BMX ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
local function TryMountBackToBMX()
    for _, seat in ipairs(Workspace:GetDescendants()) do
        if seat:IsA("VehicleSeat") and seat:IsDescendantOf(Workspace:FindFirstChild("Vehicles")) and not seat.Occupant then
            if (seat.Position - rootPart.Position).Magnitude <= 15 then
                print("[üö≤] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô BMX...")
                rootPart.CFrame = seat.CFrame + Vector3.new(0, 5, 0)
                task.wait(0.2)
                humanoid.Sit = true
                return
            end
        end
    end
end

-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏£‡∏ñ
local function TryBoostBMX()
    local seat = nil
    for _, s in ipairs(Workspace:GetDescendants()) do
        if s:IsA("VehicleSeat") and s.Occupant == humanoid then
            seat = s
            break
        end
    end

    if not seat then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö VehicleSeat ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏±‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà (Occupant)")
        return
    end

    local bmx = seat:FindFirstAncestorWhichIsA("Model")
    while bmx and bmx.Parent ~= Workspace:FindFirstChild("Vehicles") do
        bmx = bmx.Parent
    end

    if not bmx or not bmx:IsA("Model") then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• BMX ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ Vehicles")
        return
    end

    print("‚úÖ ‡∏û‡∏ö BMX ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: " .. bmx.Name)

    for _, part in ipairs(bmx:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = false
        end
    end

    local mainPart = bmx:FindFirstChild("DriverSeat") or bmx.PrimaryPart or bmx:FindFirstChildWhichIsA("BasePart")
    if not mainPart then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß")
        return
    end

    local bv = mainPart:FindFirstChild("BMXForce") or Instance.new("BodyVelocity")
    bv.Name = "BMXForce"
    bv.MaxForce = Vector3.new(1e5, 0, 1e5)
    bv.Parent = mainPart

    RunService.Heartbeat:Connect(function()
        if not mainPart or not mainPart:IsDescendantOf(Workspace) then return end
        if humanoid.SeatPart == seat then
            bv.Velocity = mainPart.CFrame.LookVector * 120
        else
            bv.Velocity = Vector3.zero
        end
    end)

    print("üöÄ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß BMX ‡∏î‡πâ‡∏ß‡∏¢ BodyVelocity (‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
end

-- üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ATM ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
local function IsATMReady(atm)
    local prompt = atm:FindFirstChildWhichIsA("ProximityPrompt", true)
    return prompt and prompt.Enabled or false
end

local function FindNearestReadyATM()
    local nearestATM = nil
    local shortestDist = math.huge
    for _, atm in pairs(ATMFolder:GetChildren()) do
        if not (atm:IsA("Model") or atm:IsA("BasePart")) then continue end
        local pos = atm:IsA("Model") and atm:GetModelCFrame().Position or atm.Position
        local dist = (pos - rootPart.Position).Magnitude
        if IsATMReady(atm) and dist < shortestDist then
            shortestDist = dist
            nearestATM = atm
        end
    end
    return nearestATM
end

-- üß≠ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á ATM ‡∏î‡πâ‡∏ß‡∏¢ Pathfinding
local function NavigateToATM(atm)
    if not atm then return end
    currentATM = atm
    DismountIfSeated()
    moving = true

    local targetPos = atm:IsA("Model") and atm:GetModelCFrame().Position or atm.Position
    local path = PathfindingService:CreatePath()
    path:ComputeAsync(rootPart.Position, targetPos)

    if path.Status ~= Enum.PathStatus.Success then
        warn("[‚ùå] ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á ATM")
        moving = false
        return
    end

    for _, waypoint in ipairs(path:GetWaypoints()) do
        humanoid:MoveTo(waypoint.Position)
        local success = humanoid.MoveToFinished:Wait()
        if not success or not IsATMReady(atm) then
            print("[‚ö†Ô∏è] ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≤‡∏á")
            moving = false
            return
        end
    end

    print("[‚úÖ] ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ATM ‡πÅ‡∏•‡πâ‡∏ß")
    TryMountBackToBMX()
    moving = false
end

-- üîÅ ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
TryBoostBMX()
_G.DismountIfSeated = DismountIfSeated

while true do
    if not moving and humanoid.Parent then
        local atm = FindNearestReadyATM()
        if atm then
            NavigateToATM(atm)
        else
            warn("[AutoFarmATM] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ATM ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        end
    end
    task.wait(3)
end
