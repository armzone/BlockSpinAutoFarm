local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local PathfindingService = game:GetService("PathfindingService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local rootPart = char:WaitForChild("HumanoidRootPart")
local humanoid = char:WaitForChild("Humanoid")

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
local moving = false
local isEnabled = true
local speed = 15
local walkSpeed = 16 -- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏î‡∏¥‡∏ô Humanoid
local maxRetries = 3
local retryDelay = 2

-- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ)
local targetPositions = {
    Vector3.new(1224.875, 255.1919708251953, -559.2366943359375),
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    -- Vector3.new(x, y, z),
}
local currentTargetIndex = 1

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Character
local function IsCharacterValid()
    return char and char.Parent and rootPart and rootPart.Parent and humanoid and humanoid.Health > 0
end

-- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Character ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Respawn
local function OnCharacterAdded(newChar)
    char = newChar
    rootPart = char:WaitForChild("HumanoidRootPart")
    humanoid = char:WaitForChild("Humanoid")
    moving = false
    print("üîÑ Character ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö")
end

player.CharacterAdded:Connect(OnCharacterAdded)

-- ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Beam ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Path (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local activeBeams = {}
local function ClearAllBeams()
    for _, beam in pairs(activeBeams) do
        if beam and beam.Parent then
            beam:Destroy()
        end
    end
    activeBeams = {}
end

local function DrawPathLine(fromPos, toPos, color)
    if not Workspace.Terrain then return end
    
    local att0 = Instance.new("Attachment")
    att0.Parent = Workspace.Terrain
    att0.WorldPosition = fromPos
    
    local att1 = Instance.new("Attachment")
    att1.Parent = Workspace.Terrain
    att1.WorldPosition = toPos
    
    local beam = Instance.new("Beam")
    beam.Attachment0 = att0
    beam.Attachment1 = att1
    beam.Width0 = 0.5
    beam.Width1 = 0.5
    beam.Color = ColorSequence.new(color or Color3.new(0, 1, 0))
    beam.FaceCamera = true
    beam.Transparency = NumberSequence.new(0.2)
    beam.LightEmission = 0.5
    beam.Parent = att0
    
    -- ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    table.insert(activeBeams, att0)
    table.insert(activeBeams, att1)
    
    -- ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤)
    Debris:AddItem(att0, 60)
    Debris:AddItem(att1, 60)
end

-- ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ CFrame (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local function MoveToPosition(targetPos, useFullY)
    if not IsCharacterValid() then return false end
    
    local done = false
    local connection
    local timeout = 30 -- ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    local startTime = tick()
    
    print(string.format("[DEBUG] üéØ ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ: %s", tostring(targetPos)))
    
    connection = RunService.Heartbeat:Connect(function(dt)
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout
        if tick() - startTime > timeout then
            warn("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            done = true
            connection:Disconnect()
            return
        end
        
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Character
        if not IsCharacterValid() then
            done = true
            connection:Disconnect()
            return
        end
        
        local currentPos = rootPart.Position
        local fixedTarget
        
        -- ‡πÉ‡∏ä‡πâ Y-axis ‡∏ï‡∏≤‡∏° waypoint ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        if useFullY then
            fixedTarget = targetPos
        else
            fixedTarget = Vector3.new(targetPos.X, currentPos.Y, targetPos.Z)
        end
        
        local direction = fixedTarget - currentPos
        local distance = direction.Magnitude
        
        -- ‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏∂‡πâ‡∏ô
        if distance < 3 then
            print(string.format("[DEBUG] ‚úÖ ‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏∞‡∏¢‡∏∞: %.2f", distance))
            done = true
            connection:Disconnect()
            return
        end
        
        local step = math.min(speed * dt, distance)
        local moveVector = direction.Unit * step
        
        -- Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if math.floor(tick()) % 2 == 0 and (tick() - math.floor(tick())) < 0.1 then
            print(string.format("[DEBUG] üìç ‡∏£‡∏∞‡∏¢‡∏∞: %.2f | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: %.2f", distance, step/dt))
        end
        
        -- ‡πÉ‡∏ä‡πâ CFrame ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        local success, err = pcall(function()
            if useFullY then
                rootPart.CFrame = CFrame.new(currentPos + moveVector)
            else
                rootPart.CFrame = rootPart.CFrame + Vector3.new(moveVector.X, 0, moveVector.Z)
            end
        end)
        
        if not success then
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:", err)
            done = true
            connection:Disconnect()
        end
    end)
    
    repeat task.wait(0.1) until done
    return IsCharacterValid()
end

-- ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ Pathfinding (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local function WalkToPosition(targetPos, retryCount)
    if not targetPos or not IsCharacterValid() then return false end
    
    retryCount = retryCount or 0
    moving = true
    
    print(string.format("[DEBUG] üö∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ: %s (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà %d)", tostring(targetPos), retryCount + 1))
    
    -- ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    ClearAllBeams()
    
    local success, path = pcall(function()
        return PathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            AgentJumpHeight = 15,
            AgentCanClimb = true,
            WaypointSpacing = 8, -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á waypoint
            Costs = {
                Water = 20,
                DangerousArea = math.huge
            }
        })
    end)
    
    if not success then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Path ‡πÑ‡∏î‡πâ:", path)
        moving = false
        return false
    end
    
    local computeSuccess, err = pcall(function()
        path:ComputeAsync(rootPart.Position, targetPos)
    end)
    
    if not computeSuccess then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Path ‡πÑ‡∏î‡πâ:", err)
        moving = false
        return false
    end
    
    if path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()
        print(string.format("[DEBUG] üü¢ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: %d waypoints", #waypoints))
        
        -- ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for i = 1, #waypoints - 1 do
            local color = waypoints[i].Action == Enum.PathWaypointAction.Jump and Color3.new(1, 1, 0) or Color3.new(0, 1, 0)
            DrawPathLine(waypoints[i].Position, waypoints[i + 1].Position, color)
        end
        
        -- ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏° waypoints
        for i, wp in ipairs(waypoints) do
            if not IsCharacterValid() or not isEnabled then
                moving = false
                return false
            end
            
            print(string.format("[DEBUG] üìç Waypoint %d/%d: %s", i, #waypoints, tostring(wp.Position)))
            
            -- ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if wp.Action == Enum.PathWaypointAction.Jump then
                print("ü¶ò ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î!")
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                task.wait(0.5) -- ‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
            end
            
            -- ‡πÉ‡∏ä‡πâ Humanoid.MoveTo ‡πÅ‡∏ó‡∏ô CFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
            local moveSuccess = false
            local attempts = 0
            
            while not moveSuccess and attempts < 3 do
                attempts = attempts + 1
                
                -- ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Humanoid.MoveTo ‡∏Å‡πà‡∏≠‡∏ô
                humanoid:MoveTo(wp.Position)
                local moveStart = tick()
                
                -- ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á waypoint ‡∏´Îòê‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                while IsCharacterValid() and isEnabled do
                    local currentPos = rootPart.Position
                    local distance = (wp.Position - currentPos).Magnitude
                    
                    if distance < 4 then
                        moveSuccess = true
                        break
                    end
                    
                    if tick() - moveStart > 10 then -- ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                        print("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ MoveTo - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ CFrame")
                        moveSuccess = MoveToPosition(wp.Position, true)
                        break
                    end
                    
                    task.wait(0.1)
                end
                
                if not moveSuccess then
                    print(string.format("üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà waypoint %d (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà %d)", i, attempts))
                    task.wait(1)
                end
            end
            
            if not moveSuccess then
                warn(string.format("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á waypoint %d", i))
                -- ‡∏•‡∏≠‡∏á‡∏ï‡πà‡∏≠ waypoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                continue
            end
        end
        
        print(string.format("[DEBUG] ‚úÖ ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: %s", tostring(targetPos)))
        moving = false
        return true
        
    else
        warn(string.format("[‚ùå AutoWalk] Pathfinding ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %s", path.Status.Name))
        
        -- ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        if retryCount < maxRetries then
            print(string.format("üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å %d ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... (%d/%d)", retryDelay, retryCount + 1, maxRetries))
            task.wait(retryDelay)
            moving = false
            return WalkToPosition(targetPos, retryCount + 1)
        else
            warn("‚ùå ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
            moving = false
            return false
        end
    end
end

-- ‡∏£‡∏∞‡∏ö‡∏ö AutoFarm ‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ
local function StartAutoFarm()
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AutoFarm")
    
    while isEnabled do
        if not IsCharacterValid() then
            print("‚è≥ ‡∏£‡∏≠ Character ‡πÇ‡∏´‡∏•‡∏î...")
            task.wait(2)
            continue
        end
        
        if moving then
            task.wait(1)
            continue
        end
        
        local targetPos = targetPositions[currentTargetIndex]
        if targetPos then
            local success = WalkToPosition(targetPos)
            
            -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            currentTargetIndex = currentTargetIndex + 1
            if currentTargetIndex > #targetPositions then
                currentTargetIndex = 1 -- ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å
            end
            
            if success then
                print("üí§ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                task.wait(3)
            else
                print("üí§ ‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                task.wait(5)
            end
        else
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
            break
        end
        
        task.wait(1) -- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô lag
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
local function SetWalkSpeed(newSpeed)
    walkSpeed = math.clamp(newSpeed, 1, 50)
    speed = walkSpeed -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó speed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CFrame movement
    
    if IsCharacterValid() then
        humanoid.WalkSpeed = walkSpeed
        print(string.format("‚ö° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏õ‡πá‡∏ô: %.1f", walkSpeed))
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
local function ToggleAutoFarm()
    isEnabled = not isEnabled
    if isEnabled then
        print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AutoFarm")
        task.spawn(StartAutoFarm)
    else
        print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î AutoFarm")
        moving = false
    end
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
local function CreateAutoFarmGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoFarmGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    screenGui.ResetOnSpawn = false
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 280, 0, 280)
    mainFrame.Position = UDim2.new(0, 20, 0, 20)
    mainFrame.BackgroundColor3 = Color3.new(0, 0, 0)
    mainFrame.BackgroundTransparency = 0.3
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Corner Radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "ü§ñ AutoFarm Control"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.GothamBold
    title.Parent = mainFrame
    
    -- Status Label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(1, -20, 0, 25)
    statusLabel.Position = UDim2.new(0, 10, 0, 35)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏¥‡∏î"
    statusLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = mainFrame
    
    -- Target Label
    local targetLabel = Instance.new("TextLabel")
    targetLabel.Name = "TargetLabel"
    targetLabel.Size = UDim2.new(1, -20, 0, 25)
    targetLabel.Position = UDim2.new(0, 10, 0, 65)
    targetLabel.BackgroundTransparency = 1
    targetLabel.Text = "üéØ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: 1/1"
    targetLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)
    targetLabel.TextScaled = true
    targetLabel.Font = Enum.Font.Gotham
    targetLabel.TextXAlignment = Enum.TextXAlignment.Left
    targetLabel.Parent = mainFrame
    
    -- Speed Settings Label
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Name = "SpeedLabel"
    speedLabel.Size = UDim2.new(1, -20, 0, 20)
    speedLabel.Position = UDim2.new(0, 10, 0, 95)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = string.format("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: %.1f", walkSpeed)
    speedLabel.TextColor3 = Color3.new(0.8, 0.8, 0.8)
    speedLabel.TextScaled = true
    speedLabel.Font = Enum.Font.Gotham
    speedLabel.TextXAlignment = Enum.TextXAlignment.Left
    speedLabel.Parent = mainFrame
    
    -- Speed Slider Background
    local sliderBg = Instance.new("Frame")
    sliderBg.Name = "SliderBackground"
    sliderBg.Size = UDim2.new(1, -40, 0, 8)
    sliderBg.Position = UDim2.new(0, 20, 0, 120)
    sliderBg.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
    sliderBg.BorderSizePixel = 0
    sliderBg.Parent = mainFrame
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 4)
    sliderCorner.Parent = sliderBg
    
    -- Speed Slider Fill
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "SliderFill"
    sliderFill.Size = UDim2.new(walkSpeed / 50, 0, 1, 0) -- Max speed 50
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = Color3.new(0, 0.8, 1)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBg
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 4)
    fillCorner.Parent = sliderFill
    
    -- Speed Slider Knob
    local sliderKnob = Instance.new("Frame")
    sliderKnob.Name = "SliderKnob"
    sliderKnob.Size = UDim2.new(0, 16, 0, 16)
    sliderKnob.Position = UDim2.new(walkSpeed / 50, -8, 0.5, -8)
    sliderKnob.BackgroundColor3 = Color3.new(1, 1, 1)
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Parent = sliderBg
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = sliderKnob
    
    -- Speed Preset Buttons
    local speedButtonsFrame = Instance.new("Frame")
    speedButtonsFrame.Name = "SpeedButtons"
    speedButtonsFrame.Size = UDim2.new(1, -20, 0, 25)
    speedButtonsFrame.Position = UDim2.new(0, 10, 0, 140)
    speedButtonsFrame.BackgroundTransparency = 1
    speedButtonsFrame.Parent = mainFrame
    
    local function createSpeedButton(text, speedValue, position)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(0, 45, 1, 0)
        btn.Position = UDim2.new(0, position, 0, 0)
        btn.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
        btn.Text = text
        btn.TextColor3 = Color3.new(1, 1, 1)
        btn.TextScaled = true
        btn.Font = Enum.Font.Gotham
        btn.BorderSizePixel = 0
        btn.Parent = speedButtonsFrame
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 4)
        btnCorner.Parent = btn
        
        btn.MouseButton1Click:Connect(function()
            SetWalkSpeed(speedValue)
            UpdateSpeedUI()
        end)
        
        return btn
    end
    
    createSpeedButton("‡∏ä‡πâ‡∏≤", 8, 0)
    createSpeedButton("‡∏õ‡∏Å‡∏ï‡∏¥", 16, 55)
    createSpeedButton("‡πÄ‡∏£‡πá‡∏ß", 25, 110)
    createSpeedButton("‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß", 35, 165)
    createSpeedButton("‡∏™‡∏∏‡∏î‡πÜ", 50, 220)
    
    -- Start/Stop Button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(1, -20, 0, 35)
    toggleButton.Position = UDim2.new(0, 10, 0, 180)
    toggleButton.BackgroundColor3 = Color3.new(0, 0.6, 0)
    toggleButton.Text = "‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö"
    toggleButton.TextColor3 = Color3.new(1, 1, 1)
    toggleButton.TextScaled = true
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = mainFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 6)
    toggleCorner.Parent = toggleButton
    
    -- Status Button
    local statusButton = Instance.new("TextButton")
    statusButton.Name = "StatusButton"
    statusButton.Size = UDim2.new(1, -20, 0, 25)
    statusButton.Position = UDim2.new(0, 10, 0, 225)
    statusButton.BackgroundColor3 = Color3.new(0, 0.4, 0.8)
    statusButton.Text = "üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
    statusButton.TextColor3 = Color3.new(1, 1, 1)
    statusButton.TextScaled = true
    statusButton.Font = Enum.Font.Gotham
    statusButton.BorderSizePixel = 0
    statusButton.Parent = mainFrame
    
    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(0, 4)
    statusCorner.Parent = statusButton
    
    -- Toggle minimized state
    local isMinimized = false
    local originalSize = mainFrame.Size
    
    -- Double click to minimize
    title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local currentTime = tick()
            if title:GetAttribute("LastClick") and (currentTime - title:GetAttribute("LastClick")) < 0.5 then
                -- Double click detected
                isMinimized = not isMinimized
                if isMinimized then
                    mainFrame:TweenSize(UDim2.new(0, 280, 0, 35), "Out", "Quad", 0.3, true)
                    title.Text = "ü§ñ AutoFarm (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢)"
                else
                    mainFrame:TweenSize(originalSize, "Out", "Quad", 0.3, true)
                    title.Text = "ü§ñ AutoFarm Control"
                end
            end
            title:SetAttribute("LastClick", currentTime)
        end
    end)
    
    -- Speed Slider Functions
    local function UpdateSpeedUI()
        speedLabel.Text = string.format("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: %.1f", walkSpeed)
        sliderFill.Size = UDim2.new(walkSpeed / 50, 0, 1, 0)
        sliderKnob.Position = UDim2.new(walkSpeed / 50, -8, 0.5, -8)
    end
    
    -- Speed Slider Interaction
    local dragging = false
    local function updateSlider(input)
        local relativeX = (input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X
        relativeX = math.clamp(relativeX, 0, 1)
        local newSpeed = math.floor(relativeX * 50 * 10) / 10 -- Round to 1 decimal
        newSpeed = math.max(1, newSpeed) -- Minimum speed 1
        SetWalkSpeed(newSpeed)
        UpdateSpeedUI()
    end
    
    sliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input)
        end
    end)
    
    sliderBg.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    sliderBg.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Update UI function
    local function UpdateUI()
        if isMinimized then return end
        
        statusLabel.Text = string.format("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: %s %s", 
            isEnabled and "üü¢ ‡πÄ‡∏õ‡∏¥‡∏î" or "üî¥ ‡∏õ‡∏¥‡∏î",
            moving and "(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô)" or ""
        )
        targetLabel.Text = string.format("üéØ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: %d/%d", currentTargetIndex, #targetPositions)
        UpdateSpeedUI()
        
        if isEnabled then
            toggleButton.BackgroundColor3 = Color3.new(0.8, 0, 0)
            toggleButton.Text = "‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö"
        else
            toggleButton.BackgroundColor3 = Color3.new(0, 0.6, 0)
            toggleButton.Text = "‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö"
        end
    end
    
    -- Button Events
    toggleButton.MouseButton1Click:Connect(function()
        ToggleAutoFarm()
        UpdateUI()
    end)
    
    statusButton.MouseButton1Click:Connect(function()
        UpdateUI()
        -- Visual feedback
        statusButton.BackgroundColor3 = Color3.new(0, 0.6, 1)
        task.wait(0.1)
        statusButton.BackgroundColor3 = Color3.new(0, 0.4, 0.8)
    end)
    
    -- Auto update every 2 seconds
    task.spawn(function()
        while screenGui.Parent do
            UpdateUI()
            task.wait(2)
        end
    end)
    
    -- Initial UI update
    UpdateUI()
    print("üéÆ ‡∏™‡∏£‡πâ‡∏≤‡∏á AutoFarm GUI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! (‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠/‡∏Ç‡∏¢‡∏≤‡∏¢)")
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
task.wait(2) -- ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏â‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
print("üéÆ ‡∏£‡∏∞‡∏ö‡∏ö AutoWalk ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
SetWalkSpeed(walkSpeed)

CreateAutoFarmGUI()

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
-- ToggleAutoFarm()
