local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local PathfindingService = game:GetService("PathfindingService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local rootPart = char:WaitForChild("HumanoidRootPart")
local humanoid = char:WaitForChild("Humanoid")

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
local moving = false
local isEnabled = true
local speed = 15
local maxRetries = 3
local retryDelay = 2

-- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ)
local targetPositions = {
    Vector3.new(1224.875, 255.1919708251953, -559.2366943359375),
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    -- Vector3.new(x, y, z),
}
local currentTargetIndex = 1

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Character
local function IsCharacterValid()
    return char and char.Parent and rootPart and rootPart.Parent and humanoid and humanoid.Health > 0
end

-- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Character ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Respawn
local function OnCharacterAdded(newChar)
    char = newChar
    rootPart = char:WaitForChild("HumanoidRootPart")
    humanoid = char:WaitForChild("Humanoid")
    moving = false
    print("üîÑ Character ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö")
end

player.CharacterAdded:Connect(OnCharacterAdded)

-- ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Beam ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Path (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local function DrawPathLine(fromPos, toPos, color)
    if not Workspace.Terrain then return end
    
    local att0 = Instance.new("Attachment")
    att0.Parent = Workspace.Terrain
    att0.WorldPosition = fromPos
    
    local att1 = Instance.new("Attachment")
    att1.Parent = Workspace.Terrain
    att1.WorldPosition = toPos
    
    local beam = Instance.new("Beam")
    beam.Attachment0 = att0
    beam.Attachment1 = att1
    beam.Width0 = 0.3
    beam.Width1 = 0.3
    beam.Color = ColorSequence.new(color or Color3.new(0, 1, 0))
    beam.FaceCamera = true
    beam.Transparency = NumberSequence.new(0.3)
    beam.Parent = att0
    
    -- ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    Debris:AddItem(att0, 20)
    Debris:AddItem(att1, 20)
end

-- ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ CFrame (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local function MoveToPosition(targetPos, useFullY)
    if not IsCharacterValid() then return false end
    
    local done = false
    local connection
    local timeout = 30 -- ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    local startTime = tick()
    
    connection = RunService.Heartbeat:Connect(function(dt)
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout
        if tick() - startTime > timeout then
            warn("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            done = true
            connection:Disconnect()
            return
        end
        
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Character
        if not IsCharacterValid() then
            done = true
            connection:Disconnect()
            return
        end
        
        local currentPos = rootPart.Position
        local fixedTarget
        
        -- ‡πÉ‡∏ä‡πâ Y-axis ‡∏ï‡∏≤‡∏° waypoint ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        if useFullY then
            fixedTarget = targetPos
        else
            fixedTarget = Vector3.new(targetPos.X, currentPos.Y, targetPos.Z)
        end
        
        local direction = fixedTarget - currentPos
        local distance = direction.Magnitude
        
        if distance < 1.5 then
            done = true
            connection:Disconnect()
            return
        end
        
        local step = math.min(speed * dt, distance)
        local moveVector = direction.Unit * step
        
        -- ‡πÉ‡∏ä‡πâ CFrame ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        local success, err = pcall(function()
            if useFullY then
                rootPart.CFrame = CFrame.new(currentPos + moveVector)
            else
                rootPart.CFrame = rootPart.CFrame + Vector3.new(moveVector.X, 0, moveVector.Z)
            end
        end)
        
        if not success then
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:", err)
            done = true
            connection:Disconnect()
        end
    end)
    
    repeat task.wait(0.1) until done
    return IsCharacterValid()
end

-- ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏î‡πâ‡∏ß‡∏¢ Pathfinding (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local function WalkToPosition(targetPos, retryCount)
    if not targetPos or not IsCharacterValid() then return false end
    
    retryCount = retryCount or 0
    moving = true
    
    print(string.format("[DEBUG] üö∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ: %s (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà %d)", tostring(targetPos), retryCount + 1))
    
    local success, path = pcall(function()
        return PathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            AgentJumpHeight = 15,
            AgentCanClimb = true,
            WaypointSpacing = 4,
            Costs = {
                Water = 20,
                DangerousArea = math.huge
            }
        })
    end)
    
    if not success then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Path ‡πÑ‡∏î‡πâ:", path)
        moving = false
        return false
    end
    
    local computeSuccess, err = pcall(function()
        path:ComputeAsync(rootPart.Position, targetPos)
    end)
    
    if not computeSuccess then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Path ‡πÑ‡∏î‡πâ:", err)
        moving = false
        return false
    end
    
    if path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()
        print(string.format("[DEBUG] üü¢ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: %d waypoints", #waypoints))
        
        -- ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        for i = 1, #waypoints - 1 do
            local color = waypoints[i].Action == Enum.PathWaypointAction.Jump and Color3.new(1, 1, 0) or Color3.new(0, 1, 0)
            DrawPathLine(waypoints[i].Position, waypoints[i + 1].Position, color)
        end
        
        -- ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏° waypoints
        for i, wp in ipairs(waypoints) do
            if not IsCharacterValid() or not isEnabled then
                moving = false
                return false
            end
            
            -- ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if wp.Action == Enum.PathWaypointAction.Jump then
                print("ü¶ò ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î!")
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                task.wait(0.3)
            end
            
            local moveSuccess = MoveToPosition(wp.Position, true)
            if not moveSuccess then
                warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ waypoint ‡∏ó‡∏µ‡πà", i)
                break
            end
        end
        
        print(string.format("[DEBUG] ‚úÖ ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: %s", tostring(targetPos)))
        moving = false
        return true
        
    else
        warn(string.format("[‚ùå AutoWalk] Pathfinding ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %s", path.Status.Name))
        
        -- ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        if retryCount < maxRetries then
            print(string.format("üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å %d ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... (%d/%d)", retryDelay, retryCount + 1, maxRetries))
            task.wait(retryDelay)
            moving = false
            return WalkToPosition(targetPos, retryCount + 1)
        else
            warn("‚ùå ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
            moving = false
            return false
        end
    end
end

-- ‡∏£‡∏∞‡∏ö‡∏ö AutoFarm ‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ
local function StartAutoFarm()
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AutoFarm")
    
    while isEnabled do
        if not IsCharacterValid() then
            print("‚è≥ ‡∏£‡∏≠ Character ‡πÇ‡∏´‡∏•‡∏î...")
            task.wait(2)
            continue
        end
        
        if moving then
            task.wait(1)
            continue
        end
        
        local targetPos = targetPositions[currentTargetIndex]
        if targetPos then
            local success = WalkToPosition(targetPos)
            
            -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            currentTargetIndex = currentTargetIndex + 1
            if currentTargetIndex > #targetPositions then
                currentTargetIndex = 1 -- ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å
            end
            
            if success then
                print("üí§ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                task.wait(3)
            else
                print("üí§ ‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                task.wait(5)
            end
        else
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
            break
        end
        
        task.wait(1) -- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô lag
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
local function ToggleAutoFarm()
    isEnabled = not isEnabled
    if isEnabled then
        print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô AutoFarm")
        task.spawn(StartAutoFarm)
    else
        print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î AutoFarm")
        moving = false
    end
end

-- Commands ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
game.Players.LocalPlayer.Chatted:Connect(function(message)
    local cmd = message:lower()
    if cmd == "/start" or cmd == "/‡πÄ‡∏£‡∏¥‡πà‡∏°" then
        if not isEnabled then ToggleAutoFarm() end
    elseif cmd == "/stop" or cmd == "/‡∏´‡∏¢‡∏∏‡∏î" then
        if isEnabled then ToggleAutoFarm() end
    elseif cmd == "/status" or cmd == "/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" then
        print(string.format("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: %s | ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà: %s | ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: %d/%d", 
            isEnabled and "‡πÄ‡∏õ‡∏¥‡∏î" or "‡∏õ‡∏¥‡∏î", 
            moving and "‡πÉ‡∏ä‡πà" or "‡πÑ‡∏°‡πà", 
            currentTargetIndex, 
            #targetPositions))
    elseif cmd == "/help" or cmd == "/‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" then
        print([[
ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á AutoFarm:
/start ‡∏´‡∏£‡∏∑‡∏≠ /‡πÄ‡∏£‡∏¥‡πà‡∏° - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
/stop ‡∏´‡∏£‡∏∑‡∏≠ /‡∏´‡∏¢‡∏∏‡∏î - ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö  
/status ‡∏´‡∏£‡∏∑‡∏≠ /‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
/help ‡∏´‡∏£‡∏∑‡∏≠ /‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        ]])
    end
end)

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
task.wait(2) -- ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏â‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
print("üéÆ ‡∏£‡∏∞‡∏ö‡∏ö AutoWalk ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
print("üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡∏´‡∏£‡∏∑‡∏≠ /‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
print("üöÄ ‡∏û‡∏¥‡∏°‡∏û‡πå /start ‡∏´‡∏£‡∏∑‡∏≠ /‡πÄ‡∏£‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
-- ToggleAutoFarm()
