--[[
    ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå AutoFarm ATM (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Syntax Error ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô BindCharacter
    - ‡∏•‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô WalkToATM ‡∏ã‡∏∂‡πà‡∏á‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ (‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß)
    - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏∂‡πâ‡∏ô
    - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ NoPath ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° MoveTo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
    - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Manual Override
    - [‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö WalkSpeed ‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
    - [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö ProximityPrompt
]]

--// Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local PathfindingService = game:GetService("PathfindingService")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager") -- ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á input

--// Configuration
_G.WalkSpeedOverride = nil -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏ö‡∏ö manual ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô _G.WalkSpeedOverride = 20 (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 16)
local ADJUST_SPEED_BY_FPS = true -- [‡πÉ‡∏´‡∏°‡πà] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô false ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö WalkSpeed ‡πÄ‡∏≠‡∏á
local INTERACT_DISTANCE = 8 -- ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö ATM
local OVERRIDE_TIMEOUT = 10 -- ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà AutoFarm ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠

--// Variables
local player = Players.LocalPlayer
local char, humanoid, rootPart
local humanoidConnection
local manualOverride = false
local lastManualMoveTime = tick() -- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Manual Override
local lastPosition = Vector3.new(0,0,0)

local ATMFolder = Workspace:WaitForChild("Map"):WaitForChild("Props"):WaitForChild("ATMs")
local currentATM = nil
local moving = false

--// Debugging Helper
local function log(message)
    print("[AutoFarmATM] " .. message)
end

--// Functions

local function BindCharacter()
    char = player.Character or player.CharacterAdded:Wait()
    humanoid = char:WaitForChild("Humanoid")
    rootPart = char:WaitForChild("HumanoidRootPart")
    lastPosition = rootPart.Position -- Initialize lastPosition

    if humanoidConnection then
        humanoidConnection:Disconnect()
    end

    local lastFrame = tick()
    humanoidConnection = RunService.Heartbeat:Connect(function()
        if not humanoid or not humanoid.Parent or not rootPart or not rootPart.Parent then return end
        
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Manual Override
        if (rootPart.Position - lastPosition).Magnitude > 0.1 then -- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            lastManualMoveTime = tick()
            if not manualOverride then
                log("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô, ‡∏õ‡∏¥‡∏î AutoFarm ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (Manual Override)")
            end
            manualOverride = true
        else
            if manualOverride and (tick() - lastManualMoveTime > OVERRIDE_TIMEOUT) then
                log("ü§ñ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á " .. OVERRIDE_TIMEOUT .. " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                manualOverride = false
            end
        end
        lastPosition = rootPart.Position

        -- [‡πÉ‡∏´‡∏°‡πà] ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ ADJUST_SPEED_BY_FPS ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if ADJUST_SPEED_BY_FPS then
            local now = tick()
            local delta = now - lastFrame
            lastFrame = now

            local estimatedFPS = math.clamp(1 / delta, 30, 144) -- ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á FPS
            local autoSpeed = math.clamp(16 * (estimatedFPS / 60), 16, 26) -- ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á WalkSpeed
            humanoid.WalkSpeed = _G.WalkSpeedOverride or autoSpeed
        elseif _G.WalkSpeedOverride then -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° FPS ‡πÅ‡∏ï‡πà‡∏°‡∏µ override
            humanoid.WalkSpeed = _G.WalkSpeedOverride
        else -- ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            humanoid.WalkSpeed = 16
        end
    end)
end

local function IsATMReady(atm)
    if not atm or not atm.Parent then return false end
    local prompt = atm:FindFirstChildWhichIsA("ProximityPrompt", true)
    return prompt and prompt.Enabled and prompt.ActionText ~= "Used" -- ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Used" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ
end

local function FindNearestReadyATM()
    local nearestATM = nil
    local shortestDist = math.huge
    
    if not rootPart then return nil end

    for _, atm in ipairs(ATMFolder:GetChildren()) do
        if atm:IsA("BasePart") or atm:IsA("Model") then
            -- ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ATM (‡πÉ‡∏ä‡πâ ProximityPrompt.Parent.Position ‡∏Å‡πà‡∏≠‡∏ô)
            local pos = atm:FindFirstChildWhichIsA("ProximityPrompt", true) and atm:FindFirstChildWhichIsA("ProximityPrompt", true).Parent.Position or (atm:IsA("Model") and atm:GetPivot().Position or atm.Position)
            local dist = (pos - rootPart.Position).Magnitude
            
            if IsATMReady(atm) and dist < shortestDist then
                shortestDist = dist
                nearestATM = atm
            else
                -- ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ATM ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                -- print("[‚õî] ATM ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏Å‡∏•‡∏Å‡∏ß‡πà‡∏≤")
            end
        end
    end

    if nearestATM then
        log("‚úÖ ‡∏û‡∏ö ATM ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: " .. nearestATM:GetFullName() .. " | ‡∏£‡∏∞‡∏¢‡∏∞: " .. math.floor(shortestDist))
    else
        log("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö ATM ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠...") -- ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö ATM ‡πÄ‡∏•‡∏¢
    end
    return nearestATM
end

local function InteractWithATM(atm)
    local prompt = atm:FindFirstChildWhichIsA("ProximityPrompt", true)
    if prompt and prompt.Enabled then
        log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö ATM: " .. atm:GetFullName())
        
        -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ProximityPrompt ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Local)
        prompt:InputHoldEnd() -- ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏ô‡∏à‡∏ö
        
        -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ ProximityPrompt ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ
        local timeout = 5 -- ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        local startTick = tick()
        repeat
            task.wait(0.1)
        until not prompt.Enabled or (tick() - startTick > timeout)

        if not prompt.Enabled then
            log("üí∞ ‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ATM ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß.")
            return true
        else
            log("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏±‡∏ö ATM ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤.")
            return false
        end
    end
    log("‚ùå ATM ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö.")
    return false
end

local function WalkToATM(atm)
    if not atm or not humanoid or not rootPart then return end
    
    moving = true
    currentATM = atm
    
    -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á ProximityPrompt.Parent ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á ATM
    local targetPosition = atm:FindFirstChildWhichIsA("ProximityPrompt", true) and atm:FindFirstChildWhichIsA("ProximityPrompt", true).Parent.Position or (atm:IsA("Model") and atm:GetPivot().Position or atm.Position) + Vector3.new(0, 1.5, 0)

    local path = PathfindingService:CreatePath({
        AgentRadius = 2,
        AgentHeight = 5,
        AgentCanJump = true,
        AgentCanClimb = true,
        WaypointSpacing = 4
    })
    path:ComputeAsync(rootPart.Position, targetPosition)

    if path.Status == Enum.PathStatus.Success then
        log("üö∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á ATM => " .. atm:GetFullName() .. " ‡∏î‡πâ‡∏ß‡∏¢ Pathfinding.")
        local waypoints = path:GetWaypoints()
        
        for i, waypoint in ipairs(waypoints) do
            if not IsATMReady(currentATM) then
                log("‚ö†Ô∏è ATM ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß, ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏ï‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà.")
                moving = false
                return
            end

            humanoid:MoveTo(waypoint.Position)
            local arrived = false
            local timeout = 8 -- Max wait time for each waypoint
            local startWait = tick()
            repeat
                RunService.Heartbeat:Wait() -- ‡∏£‡∏≠ 1 ‡πÄ‡∏ü‡∏£‡∏°
                if (rootPart.Position - waypoint.Position).Magnitude < INTERACT_DISTANCE then -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö waypoint ‡∏ô‡∏µ‡πâ
                    arrived = true
                end
            until arrived or (tick() - startWait > timeout)

            if not arrived then
                log("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏µ‡πà waypoint #" .. i .. ", ‡∏≠‡∏≤‡∏à‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î.")
                -- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ return ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡πÉ‡∏ô waypoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ MoveTo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            end
        end
        log("‚ú® ‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Pathfinding!")

        -- ‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
        InteractWithATM(atm)
    else
        warn("[AutoFarmATM] ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ! ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", path.Status.Name)
        log("‚ö†Ô∏è Pathfinding ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° MoveTo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ATM ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà.")
        
        moving = true -- ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        humanoid:MoveTo(targetPosition)
        local success = humanoid.MoveToFinished:Wait(15) -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ Wait ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏Å‡∏•
        
        if success then
            log("‚ú® MoveTo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
            if (rootPart.Position - targetPosition).Magnitude < INTERACT_DISTANCE * 1.5 then 
                InteractWithATM(atm)
            else
                log("‚ö†Ô∏è ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö.") 
                -- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏≤ ATM ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Main Loop ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÉ‡∏´‡∏°‡πà
            end
        else
            log("‚ùå MoveTo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î.") 
            -- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏≤ ATM ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Main Loop ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÉ‡∏´‡∏°‡πà
        end
    end
    
    moving = false -- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à Main Loop ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å FindNearestReadyATM ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
end

--// Event Connections

player.CharacterAdded:Connect(function(newChar)
    log("‚ö†Ô∏è ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà...")
    moving = false
    manualOverride = false
    lastManualMoveTime = tick() -- Reset manual override timer
    
    newChar:WaitForChild("Humanoid")
    newChar:WaitForChild("HumanoidRootPart")
    
    BindCharacter()
    task.wait(1) -- ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î
end)

--// Main Loop

BindCharacter() -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

while task.wait(0.5) do -- ‡∏•‡∏î delay ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
    if manualOverride then
        -- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ override ‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
        continue 
    end

    if not moving and humanoid and rootPart then
        local atm = FindNearestReadyATM()
        if atm then
            WalkToATM(atm)
        else
            -- log("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö ATM ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠...") -- FindNearestReadyATM ‡∏à‡∏∞ log ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
        end
    end
end
